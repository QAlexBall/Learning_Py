# Regular Expression 描述了一种字符串匹配的模式(pattern),可以用来检查一个串是否含有某种子串,将匹配的子串替换或这从某个串中取出符合条件的子串等.

"""
例如:
    * runoo+b, 可以匹配runoob, runooob, runooooob等, +号代表前面的字符串必须至少出现一次(一次或多次)
    * runoo*b, 可以匹配runob, runoob, runooooob等, *号代表字符串可以不出现,也可以出现一次或多次
    * colou?r, 可以匹配color或者colour, ?问好代表前面的字符最多可以出现一次(0次, 或1次)
正则表达式是由普通字符(例如字符a到z)以及特殊字符(称为"元字符")组成的文字模式.
"""

"""
非打印字符

\cx     匹配由x致命的控制字符. 例如, \cM匹配一个Control-M或回车符.
\f      匹配一个换页符.等价于\x0c和\cL
\n      匹配一个换行符.等价于\x0a和\cJ
\r      匹配一个回车符.等价于\x0d和\cM
\s      匹配任何空白字符.
\S      匹配任何非空白字符. 等价于[^\f\n\r\t\v].
\t      匹配一个制表符. 等价于\x09和\cl
\v      匹配一个垂直制表符. 等价于\x0b和\cK.


特殊字符

$       匹配输入字符串的结尾位置.如果设置了RegExp对象的Multiline属性,则$也匹配'\n'或'\r'.
()      标记一个子表达式的开始和结束位置.子表达式可以获取供以后使用.
*       匹配前面的子表达式零次或多次,
+       匹配前面的子表达式一次或多次.
.       匹配出换行符\n之外的任何但字符.
[       标记一个中括号表达式的开始.
?       匹配前面的子表达式零次或一次,或指明一个非贪婪限定符.
\       将下一个字符标记为或特殊字符,或原义字符,或向后引用,或八进制转义符.
^       匹配输入字符串开始的位置, 除非在方括号表达式中使用,此时它表示不接受该集合
{       标记限定符表达式的开始.
|       指明两项之间的一个选择.


限定符

限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配.
*       匹配前面的子表达式零次或多次.例如, zo*能匹配"z"以及"zoo". *等价于{0,}.
+       匹配前面的子表达式一次或多次.等价于{1,}.
?       匹配前面的子表达式零次或一次.等价于{0,1}.
{n}     n是一个非负整数.匹配确定的n次.例如'o{2}'不能匹配"Bob"中的'o',但是能匹配"food"中的两个o.
{n,}    n是一个非负整数,其中n <= m.最少匹配n次.
{n, m}  m和n均为非负整数,其中n <= m.最少匹配n次且最多匹配m次.
通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从"贪心"表达式转换为"非贪心"表达式或者最小匹配。


定位符

定位符能够将正则表达式固定到行首或行尾.
^       匹配字符串开始的位置.
$       匹配字符串结束的位置.
\b      匹配一个单词边界,即字于空格间的位置.
\B      非单词边界匹配.


元字符

\       将下一个字符标记为或特殊字符,或一个原义字符,或一个向后引用,或一个八进制转义符.
^       匹配输入字符串开始的位置.
$       匹配输入字符串的结束位置.
(pattern)       匹配pattern并获取这一个匹配.
(?:pattern)     匹配pattern但不获取匹配结果,也就是说这是一个非获取匹配,不进行存储供以后使用.
(?=pattern)     正向肯定预查(look ahead positive assert), 在任何匹配pattern的字符串开始出匹配查找字符串
(?!pattern)     正向否定预查,于正向肯定预查类似,只是方向相反.
(?<!pattern)    方向否定预查, 与正向否定预查类似,只是方向相反.
x|y             匹配x或y
[xyz]           字符集合.匹配所包含的任意一个字符串.例如,'[abc]'可以匹配"plain"中的'a'
[^xyz]          负值字符集合.陪陪为包含的任意字符.
[a-z]           
...


云算符优先集
\ > (), (?:), (?=), [] > *, +, ?, {n}, {n,}, {n,m} > ^, $, \任何元字符,任何字符 > |
"""





























